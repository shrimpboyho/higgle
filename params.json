{"name":"Higgle","tagline":"A Tiny JavaScript Database System","body":"[higgle]() - A Tiny JavaScript Database System\r\n======\r\n[![Build Status](https://drone.io/github.com/shrimpboyho/higgle/status.png)](https://drone.io/github.com/shrimpboyho/higgle/latest)\r\n\r\nSo, yeah, it's not complete yet, but it can support simple queries and has an API similar to ```mongodb```.\r\n```js\r\nvar db = new Higgle();\r\ndb.createCollection(\"Books\");\r\nvar esums = db.collection(\"Books\");\r\nesums.insert({'DOC': 1,\r\n              'Principal':'Blue',\r\n              'Dean of Strapping':'Newlyn Joseph',\r\n              'IPs':[5234, 7432]\r\n             });\r\nesums.insert({'DOC': 2,\r\n              'Harry Potter':'JK Rowling',\r\n              'Swag':'Newlyn Joseph'\r\n             });\r\nesums.insert({'DOC': 3,\r\n              'Principal':'Blue',\r\n              'Dean of Strapping':'Newlyn Joseph',\r\n              'IPs':[5234, 7432]\r\n             });\r\nvar queryresults = esums.find({'Principal':'Blue'});\r\nconsole.log(\"Matching documents\");\r\nconsole.log(queryresults);\r\n```\r\n##How To Install\r\nIf you're working on the client side, just include the script ```higgle.js```. This will provide you with the ```Higgle``` object attached to the ```window``` object.\r\n```html\r\n<script src=\"higgle.js\"></script>\r\n<script src=\"your_code.js\"></script>\r\n```\r\nOn Node.js just require the module after installing it via NPM.\r\n\r\n```bash\r\n$ npm install higgle\r\n```\r\n```js\r\n// On Node.js you must require the module in order to use the Higgle object\r\nvar Higgle = require('higgle');\r\n```\r\n##Documentation\r\n###Creating a Database\r\nUsing ```Higgle``` is super simple. The ```Higgle``` object represents your entire database. You can create an instance of one as follows:\r\n```js\r\nvar db = new Higgle();  // It is common convention to name your database object 'db'\r\n```\r\n###Creating a Collection\r\nWithin a database you can have one or more collections. Collections are a group of JSON documents. You can create a collection by calling the following method on your database object.\r\n```js\r\ndb.createCollection(\"People\");\r\n```\r\nAll you must specify as an argument is a string which will be the name of the collection.\r\nYou can now grab a handle to the collection by calling the following method on your database object.\r\n```js\r\nvar people = db.collection(\"People\");\r\n```\r\nAll you must specify as an argument is the name of the collection (the same name you used to create the collection). The variable ```people``` is a collection object which you can utilize to modify your database.\r\n###Adding Data\r\nAdding data is super simple. Just call the following method on the collection object and specify the JSON document you want to add to the collection.\r\n```js\r\npeople.insert({'name': 'wiley',\r\n               'age': 35\r\n             });\r\npeople.insert({'name': 'smith',\r\n               'age': 16\r\n             });\r\n```\r\nThe above code adds two JSON documents to the collection known as ```people```.\r\n###Querying Data\r\n####Simple Queries\r\nQuerying data is also super simple. Every query returns an array full of documents that matched the query. To perform a query call the following method on the collection object:\r\n```js\r\n// This query will find all documents in the collection known as\r\n// 'people' that have the string 'wiley' paired with the key 'name'\r\nvar queryresults = people.find({'name':'wiley'});\r\n\r\n// You can also query with multiple JSON keys\r\nvar queryresults = people.find({'name':'wiley',\r\n                                'age': 13\r\n                               });\r\n```\r\nThe ```queryresults``` object is an array with all the JSON documents that matched the query.\r\n####Conditional Queries\r\nSay for example we want to know all the people who can legally drink. To perform such a query we would do the following:\r\n```js\r\n// Find all documents where the key of 'age' has a value greater than 21\r\nvar queryresults = people.find({ 'age': great(21) });\r\n```\r\nSimilarly, if we want to find all the documents in which the key of ```age``` has a value that is less than 21 we could perform the following query:\r\n```js\r\n// Find all documents where the key of 'age' has a value less than 21\r\nvar queryresults = people.find({ 'age': less(21) });\r\n```\r\nSimilarly, if we want to find documents with a key of ```age``` that takes on a certain range of values, we can do so:\r\n```js\r\n// Find all documents where the key of 'age' has a value in between 6 and 24\r\nvar queryresults = people.find({ 'age': range(6, 24) });\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}